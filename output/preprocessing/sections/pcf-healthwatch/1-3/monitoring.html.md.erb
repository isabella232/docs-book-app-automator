---
title: Monitoring PCF Healthwatch
owner: PCF Healthwatch
warning: This file is auto-generated by code.cloudfoundry.org/indicators. Any changes will likely be overwritten. Edit the associated indicators yaml file to make changes.
---

<p>This topic explains how to monitor the health of Pivotal Cloud Foundry (PCF) Healthwatch using the metrics and key performance indicators (KPIs) generated by the service.</p>

<p>For general information about monitoring PCF, see <a href="https://docs.pivotal.io/pivotalcf/monitoring/index.html">Monitoring Pivotal Cloud Foundry</a>.</p>



## <a id="about-metrics"></a>About Metrics</h2>
<p>PCF Healthwatch emits metrics in the following format:</p>

<pre><code>origin:&quot;healthwatch&quot; eventType:ValueMetric timestamp:1509638101820496694 deployment:&quot;healthwatch-app-dev-v1-3&quot;
job:&quot;healthwatch-forwarder&quot; index:&quot;097f4b1e-5ca8-4866-82d5-00883798dad4&quot; ip:&quot;10.0.16.29&quot; 
valueMetric:&lt;name:&quot;metrics.published&quot; value:38 unit:&quot;count&quot;&gt;
</code></pre>

<p>All PCF Healthwatch-emitted metrics have the <code>healthwatch</code> origin.</p>






		

## <a id="service-level-indicators-for-pcf-healthwatch"></a>Service Level Indicators for PCF Healthwatch</h2>
<p>Service Level Indicators monitor that key features of the PCF Healthwatch product are working as expected. These SLIs are the most important operational metrics emitted about Healthwatch itself, as they indicate the reliability of the assessments Healthwatch is making.</p>



### <a id="cli-health-test-availability"></a>CLI Health Test Availability
<table>
    <tr>
        <th width="25%">Description</th>
        <td>
            <p><strong>Use</strong>: Indicates that PCF Healthwatch is assessing the health of the Cloud Foundry Command Line Interface (cf CLI) commands. If these continuous validation tests fail to make up-to-date assessments, they are no longer a reliable warning mechanism.</p>


			<table style="background-color: #fafafa">
			
                <tr>
                    <td>
                        <strong>health.check.cliCommand.probe.available</strong>
                        <p style="margin-bottom: 0.2em; margin-top: 0.2em"><p>Emits 1 to indicate that <a href="metrics.html#cloud-foundry-cli-health">Cloud Foundry CLI Health</a> probe is available or 0 to indicate that it is unavailable. If this is absent, Healthwatch is not properly monitoring probes. This assessment of up-to-date results is made by looking for results within the configured test schedule plus timeout. For example, a test runner scheduled on 5-minute intervals with a 2-minute timeout must show a test result within the last 7 minutes to succeed.</p>
</p>
                        <span style="font-size: small">
							<span style="display: inline-block"><strong>firehose origin</strong>: healthwatch</span>
                            <span style="display: inline-block"><strong>log-cache source_id</strong>: healthwatch-forwarder</span>
                            <span style="display: inline-block"><strong>type</strong>: gauge</span>
                            <span style="display: inline-block"><strong>frequency</strong>: 60s</span>
                        </span>
                    </td>
                </tr>
			
            </table>
        </td>
    </tr>
    <tr>
        <th>PromQL</th>
        <td>
			<code>avg_over_time(health_check_cliCommand_probe_available{source_id="healthwatch-forwarder"}[5m])</code>
		</td>
    </tr>
    <tr>
        <th>Recommended measurement</th>
        <td><p>Average over last 5 minutes</p>
</td>
    </tr>
    <tr>
        <th>Recommended alert thresholds</th>
        <td>
             <em>Yellow warning</em>: Dynamic<br/>  <em>Red critical</em>: Dynamic<br/> 
        </td>
    </tr>
    <tr>
        <th>Recommended response</th>
        <td>
            <ol>
<li>Ensure the <code>cf-health-check</code> app is running in the <code>healthwatch</code> space of the <code>system</code> org.</li>
<li>Check the app logs for any obvious errors.</li>
</ol>

        </td>
    </tr>
</table>

### <a id="canary-app-health-test-availability"></a>Canary App Health Test Availability
<table>
    <tr>
        <th width="25%">Description</th>
        <td>
            <p><strong>Use</strong>: Indicates that PCF Healthwatch is assessing the current state of health for the canary app. If this continuous validation test fails to make up-to-date assessments, it is no longer a reliable warning mechanism.</p>


			<table style="background-color: #fafafa">
			
                <tr>
                    <td>
                        <strong>health.check.CanaryApp.probe.available</strong>
                        <p style="margin-bottom: 0.2em; margin-top: 0.2em"><p>Emits 1 to indicate that <a href="metrics.html#canary-app-health">Canary App Health</a> probe is available or 0 to indicate that it is unavailable. If this is absent, Healthwatch is not properly monitoring probes. This assessment of up-to-date results is made by looking for results within the configured test schedule plus timeout. For example, a test runner scheduled on 5-minute intervals with a 2-minute timeout must show a test result within the last 7 minutes to succeed.</p>
</p>
                        <span style="font-size: small">
							<span style="display: inline-block"><strong>firehose origin</strong>: healthwatch</span>
                            <span style="display: inline-block"><strong>log-cache source_id</strong>: healthwatch-forwarder</span>
                            <span style="display: inline-block"><strong>type</strong>: gauge</span>
                            <span style="display: inline-block"><strong>frequency</strong>: 60s</span>
                        </span>
                    </td>
                </tr>
			
            </table>
        </td>
    </tr>
    <tr>
        <th>PromQL</th>
        <td>
			<code>avg_over_time(health_check_CanaryApp_probe_available{source_id="healthwatch-forwarder"}[5m])</code>
		</td>
    </tr>
    <tr>
        <th>Recommended measurement</th>
        <td><p>Average over last 5 minutes</p>
</td>
    </tr>
    <tr>
        <th>Recommended alert thresholds</th>
        <td>
             <em>Yellow warning</em>: Dynamic<br/>  <em>Red critical</em>: Dynamic<br/> 
        </td>
    </tr>
    <tr>
        <th>Recommended response</th>
        <td>
            <ol>
<li>Ensure the <code>canary-health-check</code> app is running in the <code>healthwatch</code> space of the <code>system</code> org. Check the app logs for any obvious errors.</li>
<li>Verify that Apps Manager is running and accessible through the URL configured in the <code>CANARY_URL</code> environment variable of the <code>canary-health-check</code> app.</li>
</ol>

        </td>
    </tr>
</table>

### <a id="bosh-director-health-test-availability"></a>BOSH Director Health Test Availability
<table>
    <tr>
        <th width="25%">Description</th>
        <td>
            <p><strong>Use</strong>: Indicates that PCF Healthwatch is assessing the current state of health for the BOSH Director. If this continuous validation test fails to make up-to-date assessments, it is no longer a reliable warning mechanism.</p>


			<table style="background-color: #fafafa">
			
                <tr>
                    <td>
                        <strong>health.check.bosh.director.probe.available</strong>
                        <p style="margin-bottom: 0.2em; margin-top: 0.2em"><p>Emits 1 to indicate that <a href="metrics.html#bosh-director">BOSH Director Health Test</a> probe is available or 0 to indicate that it is unavailable. If this is absent, Healthwatch is not properly monitoring probes. This assessment of up-to-date results is made by looking for results within the configured test schedule plus timeout. For example, a test runner scheduled on 5-minute intervals with a 2-minute timeout must show a test result within the last 7 minutes to succeed.</p>
</p>
                        <span style="font-size: small">
							<span style="display: inline-block"><strong>firehose origin</strong>: healthwatch</span>
                            <span style="display: inline-block"><strong>log-cache source_id</strong>: healthwatch-forwarder</span>
                            <span style="display: inline-block"><strong>type</strong>: gauge</span>
                            <span style="display: inline-block"><strong>frequency</strong>: 60s</span>
                        </span>
                    </td>
                </tr>
			
            </table>
        </td>
    </tr>
    <tr>
        <th>PromQL</th>
        <td>
			<code>avg_over_time(health_check_bosh_director_probe_available{source_id="healthwatch-forwarder"}[5m])</code>
		</td>
    </tr>
    <tr>
        <th>Recommended measurement</th>
        <td><p>Average over last 5 minutes</p>
</td>
    </tr>
    <tr>
        <th>Recommended alert thresholds</th>
        <td>
             <em>Yellow warning</em>: Dynamic<br/>  <em>Red critical</em>: Dynamic<br/> 
        </td>
    </tr>
    <tr>
        <th>Recommended response</th>
        <td>
            <ol>
<li>Ensure the <code>bosh-health-check</code> app is running in the <code>healthwatch</code> space of the <code>system</code> org. Check the app logs for any obvious errors.</li>
<li>SSH into the running <code>bosh-health-check</code> app and copy the BOSH manifest from <code>/home/vcap/app/health_check_manifest.yml</code>. Try to deploy it manually on the BOSH Director and check for errors.</li>
</ol>

        </td>
    </tr>
</table>

### <a id="ops-manager-health-test-availability"></a>Ops Manager Health Test Availability
<table>
    <tr>
        <th width="25%">Description</th>
        <td>
            <p><strong>Use</strong>: Indicates that PCF Healthwatch is assessing the current state of health for Ops Manager. If this continuous validation test fails to make up-to-date assessments, it is no longer a reliable warning mechanism.</p>


			<table style="background-color: #fafafa">
			
                <tr>
                    <td>
                        <strong>health.check.OpsMan.probe.available</strong>
                        <p style="margin-bottom: 0.2em; margin-top: 0.2em"><p>Emits 1 to indicate that <a href="metrics.html#opsman">Ops Manager Health Test</a> probe is available or 0 to indicate that it is unavailable. If this is absent, Healthwatch is not properly monitoring probes. This assessment of up-to-date results is made by looking for results within the configured test schedule plus timeout. For example, a test runner scheduled on 5-minute intervals with a 2-minute timeout must show a test result within the last 7 minutes to succeed.</p>
</p>
                        <span style="font-size: small">
							<span style="display: inline-block"><strong>firehose origin</strong>: healthwatch</span>
                            <span style="display: inline-block"><strong>log-cache source_id</strong>: healthwatch-forwarder</span>
                            <span style="display: inline-block"><strong>type</strong>: gauge</span>
                            <span style="display: inline-block"><strong>frequency</strong>: 60s</span>
                        </span>
                    </td>
                </tr>
			
            </table>
        </td>
    </tr>
    <tr>
        <th>PromQL</th>
        <td>
			<code>avg_over_time(health_check_OpsMan_probe_available{source_id="healthwatch-forwarder"}[5m])</code>
		</td>
    </tr>
    <tr>
        <th>Recommended measurement</th>
        <td><p>Average over last 5 minutes</p>
</td>
    </tr>
    <tr>
        <th>Recommended alert thresholds</th>
        <td>
             <em>Yellow warning</em>: Dynamic<br/>  <em>Red critical</em>: Dynamic<br/> 
        </td>
    </tr>
    <tr>
        <th>Recommended response</th>
        <td>
            <ol>
<li>Ensure the <code>opsmanager-health-check</code> app is running in the <code>healthwatch</code> space of the <code>system</code> org. Check the app logs for any obvious errors.</li>
<li>Verify that Ops Manager is running and accessible through the URL configured in the <code>OPSMANAGER_URL</code> environment variable of the <code>opsmanager-health-check</code> app.</li>
</ol>

        </td>
    </tr>
</table>

### <a id="pcf-healthwatch-ui-availability"></a>PCF Healthwatch UI Availability
<table>
    <tr>
        <th width="25%">Description</th>
        <td>
            <p><strong>Use</strong>: Indicates that the Healthwatch UI is running and available to product users. While an issue with the UI
does not impact the assessments that PCF Healthwatch is making, loss of the UI can impact user ability to visually
reference these assessments.</p>


			<table style="background-color: #fafafa">
			
                <tr>
                    <td>
                        <strong>healthwatch.ui.available</strong>
                        <p style="margin-bottom: 0.2em; margin-top: 0.2em"><p>The PCF Healthwatch UI is available. This assessment is made using a probe that looks for a successful response: 1 = available, 0 = not available, or timeout (10 s).</p>
</p>
                        <span style="font-size: small">
							<span style="display: inline-block"><strong>firehose origin</strong>: healthwatch</span>
                            <span style="display: inline-block"><strong>log-cache source_id</strong>: healthwatch-forwarder</span>
                            <span style="display: inline-block"><strong>type</strong>: gauge</span>
                            <span style="display: inline-block"><strong>frequency</strong>: 60s</span>
                        </span>
                    </td>
                </tr>
			
            </table>
        </td>
    </tr>
    <tr>
        <th>PromQL</th>
        <td>
			<code>avg_over_time(ui_available{source_id="healthwatch-forwarder"}[5m])</code>
		</td>
    </tr>
    <tr>
        <th>Recommended measurement</th>
        <td><p>Average over last 5 minutes</p>
</td>
    </tr>
    <tr>
        <th>Recommended alert thresholds</th>
        <td>
             <em>Yellow warning</em>: Dynamic<br/>  <em>Red critical</em>: Dynamic<br/> 
        </td>
    </tr>
    <tr>
        <th>Recommended response</th>
        <td>
            <ol>
<li>Ensure the <code>healthwatch</code> app is running in the healthwatch space of the system org.</li>
<li>Check the app logs for any obvious errors.</li>
<li>Verify that the <code>/info</code> endpoint is available on the healthwatch app route.</li>
</ol>

        </td>
    </tr>
</table>




		

## <a id="key-performance-indicators-for-pcf-healthwatch"></a>Key Performance Indicators for PCF Healthwatch</h2>
<p>This section describes the KPIs that you can use to monitor the health of PCF Healthwatch.</p>



### <a id="number-of-pcf-healthwatch-nozzle-disconnects-from-firehose"></a>Number of PCF Healthwatch Nozzle Disconnects from Firehose
<table>
    <tr>
        <th width="25%">Description</th>
        <td>
            <p><strong>Use</strong>: An unusual increase in the number of disconnects from the Firehose typically indicates that you need to
scale the nozzle up. The Firehose disconnects nozzles that are slow consumers to protect apps from backpressure.
This metric can also spike during a PCF deployment because the Traffic Controller VMs restart, logging a disconnect.</p>

<p>A prolonged period of losing metrics as a result of disconnects can endanger the assessments that PCF Healthwatch
makes using platform metrics from the Firehose.</p>


			<table style="background-color: #fafafa">
			
                <tr>
                    <td>
                        <strong>ingestor.disconnects</strong>
                        <p style="margin-bottom: 0.2em; margin-top: 0.2em"><p>Number of forced disconnects of the <a href="./architecture.html">PCF Healthwatch data ingestor nozzle</a> from the Firehose. Incremented each time an ingestor is disconnected from the firehose.</p>
</p>
                        <span style="font-size: small">
							<span style="display: inline-block"><strong>firehose origin</strong>: healthwatch</span>
                            <span style="display: inline-block"><strong>log-cache source_id</strong>: healthwatch-forwarder</span>
                            <span style="display: inline-block"><strong>type</strong>: gauge</span>
                            <span style="display: inline-block"><strong>frequency</strong>: 60s</span>
                        </span>
                    </td>
                </tr>
			
            </table>
        </td>
    </tr>
    <tr>
        <th>PromQL</th>
        <td>
			<code>avg_over_time(healthwatch_ingestor_disconnects{source_id="healthwatch-forwarder"}[5m])</code>
		</td>
    </tr>
    <tr>
        <th>Recommended measurement</th>
        <td><p>Average over last 5 minutes</p>
</td>
    </tr>
    <tr>
        <th>Recommended alert thresholds</th>
        <td>
             <em>Yellow warning</em>: Dynamic<br/>  <em>Red critical</em>: Dynamic<br/> 
        </td>
    </tr>
    <tr>
        <th>Recommended response</th>
        <td>
            <p>If no known deployment occurred and the spike is sustained, increase the number of PCF Healthwatch Ingestor
instances and monitor this metric to ensure that it returns to a normal state.</p>

<p>You can scale Ingestor instances in the Healthwatch Component Config tab of the PCF Healthwatch tile or using the
<code>cf scale healthwatch-ingestor</code> command. While <code>cf scale</code> helps you to quickly scale the instances, you should also
update the tile configuration so that the next deployment does not override the manual scaling.</p>

        </td>
    </tr>
</table>

### <a id="number-of-ingestor-dropped-metrics"></a>Number of Ingestor Dropped Metrics
<table>
    <tr>
        <th width="25%">Description</th>
        <td>
            <p><strong>Use</strong>: An unusual increase in the number of dropped messages by the PCF Healthwatch Ingestor likely indicates
that you need to scale up this component and verify the health of Redis. A prolonged period of dropping messages
can endanger the assessments that PCF Healthwatch makes using platform metrics from the Firehose.</p>


			<table style="background-color: #fafafa">
			
                <tr>
                    <td>
                        <strong>ingestor.dropped</strong>
                        <p style="margin-bottom: 0.2em; margin-top: 0.2em"><p>Number of metrics dropped by the <a href="./architecture.html">PCF Healthwatch Ingestor</a>, which loads incoming data into the PCF Healthwatch Redis datastore.</p>
</p>
                        <span style="font-size: small">
							<span style="display: inline-block"><strong>firehose origin</strong>: healthwatch</span>
                            <span style="display: inline-block"><strong>log-cache source_id</strong>: healthwatch-forwarder</span>
                            <span style="display: inline-block"><strong>type</strong>: gauge</span>
                            <span style="display: inline-block"><strong>frequency</strong>: 60s</span>
                        </span>
                    </td>
                </tr>
			
            </table>
        </td>
    </tr>
    <tr>
        <th>PromQL</th>
        <td>
			<code>avg_over_time(healthwatch_ingestor_dropped{source_id="healthwatch-forwarder"}[5m])</code>
		</td>
    </tr>
    <tr>
        <th>Recommended measurement</th>
        <td><p>Average over last 5 minutes</p>
</td>
    </tr>
    <tr>
        <th>Recommended alert thresholds</th>
        <td>
             <em>Yellow warning</em>: Dynamic<br/>  <em>Red critical</em>: Dynamic<br/> 
        </td>
    </tr>
    <tr>
        <th>Recommended response</th>
        <td>
            <p>Verify the health of the Redis VM and increase the number of PCF Healthwatch Ingestor instances. Monitor this
metric to ensure that it returns to a normal state.</p>

<p>You can scale Ingestor instances using the <code>cf scale healthwatch-ingestor</code> command. While <code>cf scale</code> helps you to
quickly scale the instances, you should also update the Ingestor Count in the tile configuration located in
Healthwatch Component Config tab. Otherwise, the next <code>Apply Changes</code> will override the manual scaling.</p>

        </td>
    </tr>
</table>

### <a id="redis-queue-size"></a>Redis Queue Size
<table>
    <tr>
        <th width="25%">Description</th>
        <td>
            <p><strong>Use</strong>: An unusual spike in the number of queued metrics can indicate that PCF Healthwatch Workers are unable to
keep up with the volume of metrics from the Firehose. A large Redis queue will result in value metrics and counter
events being delayed; if the queue becomes completely full, metrics will be lost altogether. This will also
adversely affect PCF Healthwatch’s ability to calculate super value metrics.</p>


			<table style="background-color: #fafafa">
			
                <tr>
                    <td>
                        <strong>redis.valueMetricQueue.size</strong>
                        <p style="margin-bottom: 0.2em; margin-top: 0.2em"><p>Number of Firehose value metrics that are queued for aggregation into Healthwatch.</p>
</p>
                        <span style="font-size: small">
							<span style="display: inline-block"><strong>firehose origin</strong>: healthwatch</span>
                            <span style="display: inline-block"><strong>log-cache source_id</strong>: healthwatch-forwarder</span>
                            <span style="display: inline-block"><strong>type</strong>: gauge</span>
                            <span style="display: inline-block"><strong>frequency</strong>: 60s</span>
                        </span>
                    </td>
                </tr>
			
                <tr>
                    <td>
                        <strong>redis.counterEventQueue.size</strong>
                        <p style="margin-bottom: 0.2em; margin-top: 0.2em"><p>Number of Firehose counter metrics that are queued for aggregation into Healthwatch.</p>
</p>
                        <span style="font-size: small">
							<span style="display: inline-block"><strong>firehose origin</strong>: healthwatch</span>
                            <span style="display: inline-block"><strong>log-cache source_id</strong>: healthwatch-forwarder</span>
                            <span style="display: inline-block"><strong>type</strong>: gauge</span>
                            <span style="display: inline-block"><strong>frequency</strong>: 60s</span>
                        </span>
                    </td>
                </tr>
			
            </table>
        </td>
    </tr>
    <tr>
        <th>PromQL</th>
        <td>
			<code>scalar(avg_over_time(redis_valueMetricQueue_size{source_id="healthwatch-forwarder"}[5m])) + scalar(avg_over_time(redis_counterEventQueue_size{source_id="healthwatch-forwarder"}[5m]))</code>
		</td>
    </tr>
    <tr>
        <th>Recommended measurement</th>
        <td><p>Average over last 5 minutes</p>
</td>
    </tr>
    <tr>
        <th>Recommended alert thresholds</th>
        <td>
             <em>Red critical</em>: &gt;= 10000<br/> 
        </td>
    </tr>
    <tr>
        <th>Recommended response</th>
        <td>
            <p>If the spike is sustained, increase the number of PCF Healthwatch Worker instances and monitor this metric to ensure
that it returns to a normal state.</p>

<p>You can scale Worker instances in the Healthwatch Component Config tab of the PCF Healthwatch tile or using the
<code>cf scale healthwatch-worker</code> command. While <code>cf scale</code> helps you to quickly scale the instances, you should also
update the tile configuration so that the next deployment does not override the manual scaling.</p>

        </td>
    </tr>
</table>

### <a id="number-of-healthwatch-super-metrics-published-to-firehose"></a>Number of Healthwatch Super Metrics Published to Firehose
<table>
    <tr>
        <th width="25%">Description</th>
        <td>
            <p><strong>Use</strong>: If an operator has not made changes that impact the number or frequency of assessments, an unusual drop in the number of metrics published can indicate that PCF Healthwatch may be experiencing a computation or publication issue.</p>


			<table style="background-color: #fafafa">
			
                <tr>
                    <td>
                        <strong>metrics.published</strong>
                        <p style="margin-bottom: 0.2em; margin-top: 0.2em"><p>The number of super value metrics published by this metron forwarder.</p>
</p>
                        <span style="font-size: small">
							<span style="display: inline-block"><strong>firehose origin</strong>: healthwatch</span>
                            <span style="display: inline-block"><strong>log-cache source_id</strong>: healthwatch-forwarder</span>
                            <span style="display: inline-block"><strong>type</strong>: gauge</span>
                            <span style="display: inline-block"><strong>frequency</strong>: 60s</span>
                        </span>
                    </td>
                </tr>
			
            </table>
        </td>
    </tr>
    <tr>
        <th>PromQL</th>
        <td>
			<code>rate(healthwatch_metrics_published{source_id="healthwatch-forwarder"}[5m])</code>
		</td>
    </tr>
    <tr>
        <th>Recommended measurement</th>
        <td><p>Average over last 5 minutes</p>
</td>
    </tr>
    <tr>
        <th>Recommended alert thresholds</th>
        <td>
             <em>Yellow warning</em>: Dynamic<br/>  <em>Red critical</em>: Dynamic<br/> 
        </td>
    </tr>
    <tr>
        <th>Recommended response</th>
        <td>
            <ol>
<li>Verify that the <code>healthwatch-forwarder</code> VM is running.</li>
<li>Check all of the logs in <code>/var/vcap/sys/log</code> on the VM.</li>
<li>Verify that the <code>*-health-check</code> apps are running and the logs in the <code>healthwatch</code> space of the <code>system</code> org are not receiving any obvious errors from them.</li>
</ol>

        </td>
    </tr>
</table>




		

## <a id="other-metrics-available"></a>Other Metrics Available</h2>
<p>This section describes other metrics that you can use to monitor PCF Healthwatch.</p>






### <a id="number-of-healthwatch-events-published-to-pcf-event-alerts"></a>Number of Healthwatch Events Published to PCF Event Alerts
<table>
   <tbody><tr><th colspan="2" style="text-align: center;"><br> events.published<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>
		<p>Number of PCF Healthwatch Event Alerts triggered and published to
[PCF Event Alerts](<a href="http://docs.pivotal.io/event-alerts/index.html">http://docs.pivotal.io/event-alerts/index.html</a>.</p>

<p><strong>Use</strong>: This metric is primarily interesting for informational purposes. As the number of alerting events could
vary greatly, it is not recommended to alert on this metric itself.</p>

		<span><strong>Firehose Origin</strong>: healthwatch</span>
		<span><strong>Log Cache Source ID</strong>: healthwatch-forwarder</span>
		<span><strong>Type</strong>: gauge</span>
		<span><strong>Frequency</strong>: 60s</span>
      </td>
   </tr>
</tbody></table>

### <a id="bosh-deployment-check-probe"></a>BOSH Deployment Check Probe
<table>
   <tbody><tr><th colspan="2" style="text-align: center;"><br> health.bosh.deployment.probe.count<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>
		<p>Number of PCF Healthwatch <a href="http://docs.pivotal.io/pcf-healthwatch/1-2/metrics.html#bosh-deployment">BOSH Deployment Occurrence</a>
probes completed in the measured time interval.</p>

<p><strong>Use</strong>: When monitoring this metric, the primary indicator of concern is an unexpected negative variance from the
normal pattern of checks per test type. If an operator has not made changes that impact the number of checks being
made, such as scaling the test runner or changing the frequency of the test, an unexpected variance from normal
likely indicates problems in the test runner functionality.</p>

<p>In the default installation, these tests run every 30 seconds across 2 runner apps.</p>

		<span><strong>Firehose Origin</strong>: healthwatch</span>
		<span><strong>Log Cache Source ID</strong>: healthwatch-forwarder</span>
		<span><strong>Type</strong>: gauge</span>
		<span><strong>Frequency</strong>: 60s</span>
      </td>
   </tr>
</tbody></table>

### <a id="cli-command-health"></a>CLI Command Health
<table>
   <tbody><tr><th colspan="2" style="text-align: center;"><br> health.check.cliCommand.probe.count<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>
		<p>Number of PCF Healthwatch <a href="metrics.html#cli">CLI Command Health</a> probe assessments completed in the measured time interval.</p>

<p><strong>Use</strong>: For alerting purposes, Pivotal suggests using <code>health.check.cliCommand.probe.available</code> instead. This metric is most helpful for additional diagnostics or secondary alerting.</p>

<p>When monitoring this metric, the primary indicator of concern is an unexpected negative variance from the normal pattern of checks per test type. If an operator has not made changes that impact the number of checks being made, such as scaling the test runner or changing the frequency of the test, an unexpected variance from normal likely indicates problems in the test runner functionality.</p>

<p>In the default installation, these tests run every 5 minutes across 2 runner apps.</p>

		<span><strong>Firehose Origin</strong>: healthwatch</span>
		<span><strong>Log Cache Source ID</strong>: healthwatch-forwarder</span>
		<span><strong>Type</strong>: gauge</span>
		<span><strong>Frequency</strong>: 60s</span>
      </td>
   </tr>
</tbody></table>

### <a id="ops-manager-health"></a>Ops Manager Health
<table>
   <tbody><tr><th colspan="2" style="text-align: center;"><br> health.check.OpsMan.probe.count<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>
		<p>Number of PCF Healthwatch <a href="metrics.html#opsman">Ops Manager Health</a> probe assessments completed in the measured time interval.</p>

<p><strong>Use</strong>: For alerting purposes, Pivotal suggests using <code>health.check.OpsMan.probe.available</code> instead. This metric is most helpful for additional diagnostics or secondary alerting.</p>

<p>When monitoring this metric, the primary indicator of concern is an unexpected negative variance from the normal pattern of checks per test type. If an operator has not made changes that impact the number of checks being made, such as scaling the test runner or changing the frequency of the test, an unexpected variance from normal likely indicates problems in the test runner functionality.</p>

<p>In the default installation, these tests run every 1 minute across 2 runner apps.</p>

		<span><strong>Firehose Origin</strong>: healthwatch</span>
		<span><strong>Log Cache Source ID</strong>: healthwatch-forwarder</span>
		<span><strong>Type</strong>: gauge</span>
		<span><strong>Frequency</strong>: 60s</span>
      </td>
   </tr>
</tbody></table>

### <a id="canary-app-health"></a>Canary App Health
<table>
   <tbody><tr><th colspan="2" style="text-align: center;"><br> health.check.CanaryApp.probe.count<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>
		<p>Number of PCF Healthwatch <a href="metrics.html#canaryapp">Canary App Health</a> probe assessments completed in the measured time interval.</p>

<p><strong>Use</strong>: For alerting purposes, Pivotal suggests using <code>health.check.CanaryApp.probe.available</code> instead. This metric is most helpful for additional diagnostics or secondary alerting.</p>

<p>When monitoring this metric, the primary indicator of concern is an unexpected negative variance from the normal pattern of checks per test type. If an operator has not made changes that impact the number of checks being made, such as scaling the test runner or changing the frequency of the test, an unexpected variance from normal likely indicates problems in the test runner functionality.</p>

<p>In the default installation, these tests run every 1 minutes across 2 runner apps.</p>

		<span><strong>Firehose Origin</strong>: healthwatch</span>
		<span><strong>Log Cache Source ID</strong>: healthwatch-forwarder</span>
		<span><strong>Type</strong>: gauge</span>
		<span><strong>Frequency</strong>: 60s</span>
      </td>
   </tr>
</tbody></table>

### <a id="bosh-director-health"></a>BOSH Director Health
<table>
   <tbody><tr><th colspan="2" style="text-align: center;"><br> health.check.bosh.director.probe.count<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>
		<p>Number of PCF Healthwatch <a href="metrics.html#bosh-director">BOSH Director Health</a> probe assessments completed in the measured time interval.</p>

<p><strong>Use</strong>: For alerting purposes, Pivotal suggests using <code>health.check.bosh.director.probe.available</code> instead. This metric is most helpful for additional diagnostics or secondary alerting.</p>

<p>When monitoring this metric, the primary indicator of concern is an unexpected negative variance from the normal pattern of checks per test type. If an operator has not made changes that impact the number of checks being made, such as scaling the test runner or changing the frequency of the test, an unexpected variance from normal likely indicates problems in the test runner functionality.</p>

<p>In the default installation, these tests run every 10 minutes using 1 runner app.</p>

		<span><strong>Firehose Origin</strong>: healthwatch</span>
		<span><strong>Log Cache Source ID</strong>: healthwatch-forwarder</span>
		<span><strong>Type</strong>: gauge</span>
		<span><strong>Frequency</strong>: 60s</span>
      </td>
   </tr>
</tbody></table>

		

