---
title: PCF Healthwatch Architecture
owner: PCF Healthwatch
---
This topic describes the architecture of Pivotal Cloud Foundry (PCF) Healthwatch.

## <a id='components'></a>PCF Healthwatch Components

The diagram below shows the architecture of PCF Healthwatch, including the PCF components that PCF Healthwatch interacts with.

<%= image_tag './images/healthwatch-architecture.png' %>

[View a larger version of this diagram](./images/healthwatch-architecture.png).

PCF Healthwatch deploys several apps as part of its installation process. These apps are responsible for creating the service UI and supporting functional health checks.

## <a id='data-flow'></a>How Data Flows Through PCF Healthwatch

Data flows through PCF Healthwatch as follows:

1. In PCF, all platform metrics are forwarded to the [Loggregator Firehose](https://docs.pivotal.io/pivotalcf/loggregator/architecture.html#firehose) by default.

1. The PCF Healthwatch Ingestor app consumes the platform metrics from the Firehose. 

1. The Ingestor forwards the platform metrics to Redis, which acts as a buffer. 

1. The Worker app consumes raw data from Redis, aggregates it, and writes transformed data to the MySQL datastore.

1. The transformed data remains available in the MySQL datastore until it is purged.

###<a id='super'></a> How Product-Created Metrics Flow Through PCF Healthwatch

PCF Healthwatch also creates additional metrics of operational value and stores them in the `super_value_metric` table in the datastore. For more information, see [PCF Healthwatch Metrics](metrics.html). These product-created platform metrics take two paths through the system: Contextual Assessments and Functional Apps.

#### Contextual Assessments

Contextual Assessments are derived from platform-emitted data, for example, 
Syslog Drain Binding Capacity. PCF Healthwatch v1.3 handles this data as follows:  

1. The Aggregator app makes additional transformations to the data.
1. The Aggregator app forwards the data to the Metron Forwarder.
1. The Metron Forwarder writes the data to the MySQL datastore and also forwards it back into the Firehose for external consumers to use. 
  <p class="note"><strong>Note</strong>: PCF Healthwatch forwards back into the Firehose only these additional metrics. The service does not forward platform metrics that are already available to the Firehose consumers.</p>
1. The transformed data remains available in the MySQL datastore until it is purged.

All ingested and service-created data points are stored in the datastore for 25 hours and then pruned.

#### Functional Apps 

Functional Apps execute Health and Uptime tests, for example, CLI Command Health. 
PCF Healthwatch v1.3 handles this data as follows:  

1. Functional Apps forward their data to the Metron Forwarder.
1. The Metron Forwarder writes that data to the MySQL datastore and also forwards it back into the Firehose for external consumers to use. This data is then available until it is purged.
  <p class="note"><strong>Note</strong>: PCF Healthwatch forwards back into the Firehose only these additional metrics. The service does not forward platform metrics that are already available to the Firehose consumers.</p>

All ingested and service-created data points are stored in the datastore for 25 hours and then pruned.

### <a id='ha'></a>How PCF Healthwatch Adjusts Data Flow for Higher Availability

When a singleton component becomes temporarily unavailable, such as when a VM restarts when a new stemcell is applied, PCF Healthwatch can adjust its data flow to provide higher availability. This adjusted data flow process is described below.

  * If Redis is temporarily unavailable, Firehose-based data buffers in the Ingestor until Redis becomes available.

  * If MySQL is temporarily unavailable, Firehose-based data queues in Redis, and data generated by PCF Healthwatch queues in the Metron Forwarder until MySQL becomes available.

## <a id='aggregation'></a>How Platform-Emitted Data is Aggregated by PCF Healthwatch

In v1.3, all Firehose-emitted platform metrics that PCF Healthwatch ingests are aggregated according to pre-defined rules before being written to the datastore. This helps avoid the cost of storing raw data, and in the case of gauge values, can add additional points of interest to the data.

  * **Counter metrics**: Maximum counter value received for the one-minute aggregation window, from which a minute-to-minute rate is later derived. Unique to the metric name and to the individual metric emitter, per instance, as applicable.

  * **Gauge metrics**: Received values for the one-minute aggregation window, aggregated and stored with the following five calculated values per metric: `avg`, `min`, `max`, `med`, `95p`. Unique to the metric name and to the individual emitter, per instance, as applicable.

## <a id='functional-apps'></a>Functional Apps Created by PCF Healthwatch

PCF Healthwatch creates the following Functional Apps:

* BOSH Director health check: the `bosh-health-check` app 
* BOSH deployment task check: the `bosh-task-check` app 
* CLI command health check: the `cf-health-check` app 
* Canary app uptime and response check: the `canaryapp-health-check` app
* Ops Manager uptime check: the `opsmanager-health-check` app
* PCF Healthwatch self-monitor and [report](http://docs.pivotal.io/pcf-healthwatch/1-1/monitoring.html): the `healthwatch-meta-monitor` app
* PCF Healthwatch event monitoring and alert publishing: the `healthwatch-alerts` app

For information about scaling these PCF Healthwatch resources, see [PCF Healthwatch Resources](resources.html#healthwatch-apps).

## <a id='networking-rules'></a>Required Networking Rules for PCF Healthwatch

Prior to deploying PCF Healthwatch, the operator must verify the network configuration necessary to allow PCF Healthwatch
components to communicate with each other and certain PCF components. The following table lists the PCF components that PCF Healthwatch needs to connect to, and why.

| Key PCF Components  | Why PCF Healthwatch Needs Access                                                           |
|-----------------|------------------------------------------------------------------------------|
|BOSH Director    | Information about BOSH Director health and executing IaaS health checks           |
|BOSH UAA         | Authorization to access the Director                                         |
|UAA              | Authorization for component metrics, CF Health Checks and PCF Healthwatch UI |
|Cloud Controller | CF Health Checks                                                             |
|Doppler          | Metric Ingestion, Forwarding Metrics to the Firehose                         |

The following table lists the communication paths and ports between PCF Healthwatch components and other PCF Healthwatch and PCF components.

| This Healthwatch component…          | Must communicate with…                                                                                        | Default TCP Port                                                      | Communication direction(s) | Notes                                                                   |
|--------------------------|---------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------|----------------------------|-------------------------------------------------------------------------|
| bosh-health-check        | <ul> <li> BOSH Director</li><li>BOSH UAA</li><li>Healthwatch Forwarder VMs</li> </ul>                         |<ul> <li>25555</li><li>8443</li><li>13322</li> </ul>                   | One way                    |                                                                         |
| bosh-task-check          | <ul> <li> BOSH Director </li><li> BOSH UAA </li><li> Healthwatch Forwarder VMs</li> </ul>                     |<ul> <li>25555 </li><li> 8443 </li><li> 13322 </li> </ul>              | One way                    |                                                                         |
| canary-health-check      | <ul> <li> Canary App via external route </li><li> Healthwatch Forwarder VMs</li> </ul>                        |<ul> <li>443 or 80 </li><li> 13322 </li> </ul>                         | One way                    |                                                                         |
| cf-health-check          | <ul> <li> CF CLI Access </li><li> Doppler </li><li> UAA </li><li>Healthwatch Forwarder VMs</li> </ul>         |<ul> <li>443 </li><li> 443 </li><li> 443 </li><li> 13322 </li> </ul>   | One way                    | CF CLI interactions. On AWS, Doppler connection is typically port 4443. |
| healthwatch              | <ul> <li> UAA </li><li> Healthwatch MySQL VM</li></ul>                                                        |<ul> <li>443 </li><li> 3306 </li> </ul>                                | One way                    |                                                                         |
| healthwatch-aggregator   | <ul> <li> Healthwatch MySQL VM </li><li> Healthwatch Forwarder VMs</li> </ul>                                 |<ul> <li>3306 </li><li> 13322 </li> </ul>                              | One way                    |                                                                         |
| healthwatch-alerts       | <ul> <li> Healthwatch MySQL VM </li><li> Healthwatch Forwarder VMs</li> </ul>                                 |<ul> <li>3306 </li><li> 13322 </li> </ul>                              | One way                    |                                                                         |
| healthwatch-api          | <ul> <li> Healthwatch MySQL VM </li><li> Healthwatch Forwarder VMs</li> </ul>                                 |<ul> <li>3306 </li><li> 13322 </li> </ul>                              | One way                    |                                                                         |
| healthwatch-ingestor     | <ul> <li> Healthwatch Redis VM </li><li>Loggregator Firehose</li><li> Healthwatch Forwarder VMs</li></ul>     |<ul> <li>6379 </li><li>443</li><li> 13322 </li> </ul>                  | One way                    |                                                                         |
| healthwatch-worker       | <ul> <li> Healthwatch MySQL VM </li><li> Healthwatch Redis VM </li><li> Healthwatch Forwarder VMs </li> </ul> |<ul> <li>3306 </li><li> 6379 </li><li> 13322 </li> </ul>               | One way                    |                                                                         |
| healthwatch-meta-monitor | <ul> <li> Healthwatch MySQL VM </li><li> Healthwatch Forwarder VMs</li> </ul>                                 |<ul> <li>3306 </li><li> 13322 </li> </ul>                              | One way                    |                                                                         |
| opsmanager-health-check  | <ul> <li> Ops Manager VM </li><li> Healthwatch Forwarder VMs</li> </ul>                                       |<ul> <li>443 </li><li> 13322 </li> </ul>                               | One way                    |                                                                         |
| ui-health-check          | <ul> <li> healthwatch via GoRouter </li><li> Healthwatch Forwarder VMs</li> </ul>                             |<ul> <li>443 </li><li> 13322 </li> </ul>                               | One way                    |                                                                         |
| Healthwatch Forwarder VM | <ul> <li> Doppler via Metron Agent </li><li> Healthwatch MySQL VM</li> </ul>                                  |<ul> <li>8082 </li><li> 3306 </li> </ul>                               | One way                    |                                                                         |
| Healthwatch MySQL VM     | No outbound connections                                                                                       |                                                                       |                            |                                                                         |
| Healthwatch Redis VM     | No outbound connections                                                                                       |                                                                       |                            |                                                                         |

<p class="note"><strong>Note</strong>: If you configure syslog forwarding for PCF Healthwatch then you will need to ensure that network path from each VM as well</p>
<p class="note"><strong>Note</strong>: PCF Healthwatch depends on the <code>bosh-system-metrics-forwarder</code> component in PAS.  For that to work the <code>trafficcontroller</code> VM needs to communicate to the BOSH Director on port 25595</p>
